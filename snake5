from random import randint

class Serpent:
    
    def __init__(self, corps, direction, step):
        self.corps = corps
        self._direction = direction #_attribut_public
        self.step = step
        self.dead = False
    def set_direction(self,val):
        self._direction = val

    def get_direction(self):
        return self._direction

    direction = property(get_direction, set_direction)
    #permet d'accéder en lecture écriture à l'attribut direction
    #snake.direction = 3 appelle la méthode set_direction
    #et on peut rajouter de la logique et du contrôle sur cette
    #affectation

    def set_tete(self,val):
        self.corps[0] = val

    def get_tete(self):
        return self.corps[0]

    tete = property(get_tete, set_tete)


    def déplacer(self):
        n = len(self.corps)
        serpent_temp = []
        for i in range(1,n):
            self.corps[-i] = self.corps[-i-1]
            #en partant de la queue
            #chaque cell prend la place de celle qui la précède
        x,y = self.tete
        x+=self.step*self.direction[0]
        y+=self.step*self.direction[1]
        self.tete = [x,y]
        if self.tete_dans_le_corps(): 
            self.dead = True

    def tete_dans_le_corps(self):
        return self.tete in self.corps[1:]

    def growth(self):
        self.corps.append(self.corps[-1])
  
    
class Pomme:

    def __init__(self,game):
        self.x = 0
        self.y = 0
        self.game = game
        self.placer()

    def placer(self):
        self.x = randint(0,self.game.LARGEUR//self.game.STEP - 1)
        self.y = randint(0, self.game.HAUTEUR//self.game.STEP - 1)

class Game:

    def __init__(self,l,h,step,frame_r):
        self.LARGEUR = l
        self.HAUTEUR = h
        self.STEP = step
        self.FRAME_RATE = frame_r
        self.score = 0
